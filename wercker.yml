box: google/golang

build:
    steps:
    # Test the project
    - script:
        name: go test
        code: go test ./...

    # Statically build the project
    - script:
        name: go build
        code: CGO_ENABLED=0 go build -a -ldflags '-s' -installsuffix cgo -o app .

    # Create cities-deployment.json for initialization
    - script:
        name: create cities-deployment.json
        code: ./create_cities-deployment.json.sh

    # Create cities-service.json for initialization
    - script:
        name: create cities-service.json
        code: ./create_cities-service.json.sh

    # Copy binary to location that gets passed along to deploy
    - script:
        name: copy binary
        code: cp app cities-service.json cities-deployment.json "$WERCKER_OUTPUT_DIR"

# Packages and pushes the docker image to Docker Hub
deploy:
    steps:
    - script:
      name: print env
      code: env
    - script:
      name: copy the source from the pipeline
      code: mv app cities-service.json cities-deployment.json /go/src/app/
    # use the scratch step to build a container from scratch based on the files present
    - script:
      name: ls
      code: ls /go/src/app
    - internal/docker-push:
        username: $USERNAME
        password: $PASSWORD
        cmd: ./app
        tag: $WERCKER_GIT_COMMIT
        ports: "5000"
        repository: ravibhim/golang-example
        registry: https://registry.hub.docker.com

    # rolling update
    #- kubectl:
    #    server: $KUBERNETES_MASTER
    #    username: $KUBERNETES_USERNAME
    #    password: $KUBERNETES_PASSWORD
    #    insecure-skip-tls-verify: true
    #    command: set image deployment $MS_NAME $MS_NAME=ravibhim/golang-example:${WERCKER_GIT_COMMIT} --record

    - kubectl:
        cwd: /go/src/app
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        insecure-skip-tls-verify: true
        command: create -f $MS_NAME-deployment.json --record
    - kubectl:
        cwd: /go/src/app
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        insecure-skip-tls-verify: true
        command: create -f $MS_NAME-service.json --record
